#+TITLE: Emacs Configuration

* Global Settings

** Automatically load changes from the disk

#+BEGIN_SRC emacs-lisp
(global-auto-revert-mode t)
#+END_SRC

** Fix colorspace for OSX

#+BEGIN_SRC emacs-lisp
(setq ns-use-srgb-colorspace nil)
#+END_SRC

** Ask y/n instead of yes/no

#+BEGIN_SRC emacs-lisp
  (fset 'yes-or-no-p 'y-or-n-p)
#+END_SRC

** Hide the usual startup message

#+BEGIN_SRC emacs-lisp
(setq inhibit-startup-message t)
(setq initial-scratch-message nil)
#+END_SRC

** Use the visual bell instead of the terminal bell

#+BEGIN_SRC emacs-lisp
(setq visual-bell t)
#+END_SRC

* Vim Key Bindings

Emacs is an amazing work environment, but I can't get by without Vim key
bindings. This section has only the most basic setup and window navigation
settings. Key bindings that are related to specific modes will be located
with that mode's configuration.

** The Basics

Get the basics up and running: evil, support for key chords (so insert mode can
be exited with =jj=, among other things), and support for a leader key.

#+BEGIN_SRC emacs-lisp
(use-package evil :ensure t :pin melpa-stable)
(use-package evil-leader :ensure t :pin melpa-stable)

(evil-mode 1)
(global-evil-leader-mode)
(evil-leader/set-leader ",")

(key-chord-mode 1)
(setq key-chord-two-key-delay 0.2)
(key-chord-define evil-insert-state-map "jj" 'evil-normal-state)
#+END_SRC

** Window Navigation

Key mapping for manipulating windows and frames.

| Command | Action                                                         |
|---------+----------------------------------------------------------------|
| =vv=    | Split the current window into two vertically stacked windows   |
| =ss=    | Split the current window into two horizontally stacked windows |
| =C-h=   | Navigate to the window left of the current window              |
| =C-l=   | Navigate to the window right of the current window             |
| =C-k=   | Navigate to the window above of the current window             |
| =C-j=   | Navigate to the window below of the current window             |
| =,m=    | Maximized the current frame                                    |
| =,f=    | Toggle fullscreen for the current frame                        |

#+BEGIN_SRC emacs-lisp
(eval-after-load "evil"
  '(progn
    (define-key evil-normal-state-map (kbd "C-h") 'evil-window-left)
    (define-key evil-normal-state-map (kbd "C-j") 'evil-window-down)
    (define-key evil-normal-state-map (kbd "C-k") 'evil-window-up)
    (define-key evil-normal-state-map (kbd "C-l") 'evil-window-right)))

(key-chord-define evil-normal-state-map "vv" 'split-window-horizontally)
(key-chord-define evil-normal-state-map "ss" 'split-window-vertically)

(evil-leader/set-key
  "m" 'toggle-frame-maximized
  "f" 'toggle-frame-fullscreen)
#+END_SRC

* Code Settings

** Enable syntax highlighting

#+BEGIN_SRC emacs-lisp
(global-font-lock-mode t)
#+END_SRC

** Show line numbers

By defaut, show line numbers everywhere. However, disable them in a few places
where they are either unnecessary or where they cause performance issues.

#+BEGIN_SRC emacs-lisp
(global-linum-mode t)
(setq line-number-mode t)
(setq column-number-mode t)
(setq linum-format "%4d ")

(defun nolinum ()
  (linum-mode 0))

(add-hook 'org-mode-hook 'nolinum)
(add-hook 'shell-mode-hook 'nolinum)
(add-hook 'ansi-term-hook 'nolinum)
#+END_SRC

** Use spaces instead of tabs

I like 2 spaces as default indent.

#+BEGIN_SRC emacs-lisp
(setq-default indent-tabs-mode nil)
(setq default-tab-width 2)
(setq tab-width 2)
#+END_SRC

** Visually indicate matching pairs of parenthesis

#+BEGIN_SRC emacs-lisp
(show-paren-mode t)
(setq show-paren-delay 0.0)
#+END_SRC

* Theming

Emacs is an incredibly flexible piece of software that can display a lot of
different information and adapt itself to both the terminal and the GUI.
Unfortunately, it's a bit ugly on its own. This is my attempt to prettify.

** Window Customizations

My preference is to interact through the keyboard, so hide unnecessary window
chrome.

#+BEGIN_SRC emacs-lisp
(tool-bar-mode 0)

(if (display-graphic-p) 
  (scroll-bar-mode -1))
#+END_SRC

** Set the font face

My current flavor of the moment in terms of font face is Operator Mono. While
it doesn't have some nice features like ligatures, it is well structured and
has features like cursive for italics, which give great visibility for
different parts of the code.

In addition to setting the default font face, configure italics and set a
couple custom typefaces.

#+BEGIN_SRC emacs-lisp
(add-to-list 'default-frame-alist '(font . "Operator Mono SSm-14"))

(custom-set-faces
  '(font-lock-comment-face ((t (:slant italic))))
  '(org-document-title ((t (:family "Operator")))))
#+END_SRC

** Add an icon font

At various points, an icon font will be used to convey information. Make
sure that it's available.

#+BEGIN_SRC emacs-lisp
(use-package all-the-icons :ensure t :pin melpa-stable)
(require 'all-the-icons)
#+END_SRC

** Color scheme

#+BEGIN_SRC emacs-lisp
(use-package base16-theme
  :ensure t
  :pin melpa-stable)

(defun -load-base16-theme(b16-colors)

  (set-face-attribute 'fringe nil 
                      :background (plist-get b16-colors :base00))

  (set-face-attribute 'linum nil
                      :background (plist-get b16-colors :base00))

  (set-face-attribute 'mode-line nil
                      :background (plist-get b16-colors :base01)
                      :foreground (plist-get b16-colors :base04)
                      :box `(:line-width 2 :color ,(plist-get b16-colors :base01))
                      :overline nil
                      :underline nil)

  (set-face-attribute 'mode-line-inactive nil
                      :background (plist-get b16-colors :base00)
                      :foreground (plist-get b16-colors :base02)
                      :box `(:line-width 2 :color ,(plist-get b16-colors :base01))
                      :overline nil
                      :underline nil))

;(if (display-graphic-p)
;  ((load-theme 'base16-solarized-dark t)
;   (-load-base16-theme base16-solarized-dark-colors)))

(if (display-graphic-p)
  (load-theme 'base16-solarized-dark t))

(if (display-graphic-p)
  (-load-base16-theme base16-solarized-dark-colors))

(global-set-key (kbd "C-c t l")
                (lambda () (interactive)
                  (load-theme 'base16-solarized-light)
                  (-load-base16-theme base16-solarized-light-colors)))

(global-set-key (kbd "C-c t s")
                (lambda () (interactive)
                  (load-theme 'base16-solarized-dark)
                  (-load-base16-theme base16-solarized-dark-colors)))

(global-set-key (kbd "C-c t d")
                (lambda () (interactive)
                  (load-theme 'base16-default-dark)
                  (-load-base16-theme base16-default-dark-colors)))

#+END_SRC
 
* Status Bar
  
This section contains all the configuration for the status bar.

** Hide some minor modes

There are a group of packages that will automatically be loaded, but we want to
be diminished (meaning that they won't appear in the modeline).

#+BEGIN_SRC emacs-lisp
(use-package undo-tree
  :diminish undo-tree-mode
  :init (global-undo-tree-mode))

(diminish 'auto-revert-mode)
(eval-after-load 'auto-revert-mode
  '(diminish 'auto-revert-mode))
#+END_SRC

