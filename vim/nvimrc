call plug#begin(stdpath('data') . '/plugged')

" Base 
Plug 'scrooloose/syntastic'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-commentary'

" UI
Plug 'chriskempson/base16-vim'
Plug 'itchyny/lightline.vim'
Plug 'mike-hearn/base16-vim-lightline'

" Navigation
Plug 'christoomey/vim-tmux-navigator'
Plug 'kien/ctrlp.vim'
Plug 'mileszs/ack.vim'
Plug 'scrooloose/nerdtree'
Plug 'Shougo/neocomplete.vim'

" Git
Plug 'airblade/vim-gitgutter'
Plug 'tpope/vim-fugitive'

" Language Plugs
Plug 'derekwyatt/vim-scala'
Plug 'hashivim/vim-hashicorp-tools'
Plug 'fatih/vim-go'
Plug 'mxw/vim-jsx'
Plug 'pangloss/vim-javascript'
Plug 'posva/vim-vue'
Plug 'leafgarland/typescript-vim'
Plug 'ianks/vim-tsx'

call plug#end()

" Custom Settings
" =====================================================================
syntax enable
set number
set tabstop=2
set shiftwidth=2
set expandtab
set backspace=indent,eol,start " backspace over everything in insert mode
set timeoutlen=1000 ttimeoutlen=0
set linespace=5
set tags=tags;/
set autoread

" Theme
" =====================================================================
let base16colorspace=256
color base16-onedark

let g:gitgutter_override_sign_column_highlight = 0
highlight LineNr ctermbg=None
highlight SignColumn ctermbg=0
highlight GitGutterAdd ctermbg=0
highlight GitGutterChange ctermbg=0
highlight GitGutterDelete ctermbg=0
highlight GitGutterChangeDelete ctermbg=0

let g:lightline = {
      \ 'colorscheme': 'base16_onedark',
      \ }

" Custom Mappings
" =====================================================================

" Simple mappings to split windows
nnoremap <silent> vv <C-w>v
nnoremap <silent> ss <C-w>s

" NERDTree
let NERDTreeMinimalUI = 1
let NERDTreeDirArrows = 1
let g:NERDTreeWinSize = 30

map <C-\> :NERDTreeToggle<CR>
map <C-n> :NERDTreeFind<CR>

" CtrlP
let g:ctrlp_custom_ignore = '\v[\/](node_modules|bower_components|target|dist|vendor|ashes\/lib)|(\.(swp|ico|git|svn))$'

" Ack
let g:ackprg = 'ag --vimgrep'

set nobackup
set noswapfile

" vim-go
let g:go_highlight_functions = 1
let g:go_highlight_methods = 1
let g:go_highlight_structs = 1
let g:go_highlight_operators = 1
let g:go_highlight_build_constraints = 1

" Syntastic
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0
let g:syntastic_go_checkers = ['golint', 'govet', 'errcheck']

let g:syntastic_mode_map = { "mode": "active",
                           \ "active_filetypes": [],
                           \ "passive_filetypes": ["scala"] }

" Custom mappings
autocmd FileType scala imap <buffer> => ⇒
autocmd FileType scala imap <buffer> <- ←
autocmd FileType scala imap <buffer> <* ← * <~
autocmd FileType scala imap <buffer> -> →
imap jk <Esc>

" Neocomplete
let g:neocomplete#enable_at_startup = 1

" Tagbar
let g:tagbar_type_go = {  
    \ 'ctagstype' : 'go',
    \ 'kinds'     : [
        \ 'p:package',
        \ 'i:imports:1',
        \ 'c:constants',
        \ 'v:variables',
        \ 't:types',
        \ 'n:interfaces',
        \ 'w:fields',
        \ 'e:embedded',
        \ 'm:methods',
        \ 'r:constructor',
        \ 'f:functions'
    \ ],
    \ 'sro' : '.',
    \ 'kind2scope' : {
        \ 't' : 'ctype',
        \ 'n' : 'ntype'
    \ },
    \ 'scope2kind' : {
        \ 'ctype' : 't',
        \ 'ntype' : 'n'
    \ },
    \ 'ctagsbin'  : 'gotags',
    \ 'ctagsargs' : '-sort -silent'
\ }

let g:syntastic_mode_map = { "mode": "active",
                           \ "active_filetypes": [],
                           \ "passive_filetypes": ["scala"] }

au BufNewFile,BufRead *.ts setlocal filetype=typescript
au BufNewFile,BufRead *.tsx setlocal filetype=typescript.tsx
