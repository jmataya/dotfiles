set nocompatible
filetype off

" Initialize Vundle
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

Plugin 'gmarik/Vundle.vim'
Plugin 'tpope/vim-fugitive'
Plugin 'tpope/vim-surround'
Plugin 'fatih/vim-go'
Plugin 'kien/ctrlp.vim'
Plugin 'scrooloose/nerdtree'
Plugin 'tpope/vim-commentary'
Plugin 'scrooloose/syntastic'
Plugin 'gregsexton/gitv'
Plugin 'airblade/vim-gitgutter'
Bundle 'godlygeek/csapprox.git'
Plugin 'itchyny/lightline.vim'
Plugin 'mileszs/ack.vim'
Plugin 'digitaltoad/vim-jade'
Plugin 'christoomey/vim-tmux-navigator'
Plugin 'chriskempson/base16-vim'
Plugin 'derekwyatt/vim-scala'
Plugin 'pangloss/vim-javascript'
Plugin 'mxw/vim-jsx'
Plugin 'flowtype/vim-flow'
Plugin 'joshdick/onedark.vim'
Plugin 'shirataki/lightline-onedark'
Plugin 'craigemery/vim-autotag'
Plugin 'vim-scripts/taglist.vim'
Plugin 'elixir-lang/vim-elixir'
Plugin 'hashivim/vim-hashicorp-tools'
Plugin 'Shougo/neocomplete.vim'
Plugin 'majutsushi/tagbar'

call vundle#end()
filetype plugin indent on

" Custom Settings
" =====================================================================
syntax enable
set number
set tabstop=2
set shiftwidth=2
set expandtab
set backspace=indent,eol,start " backspace over everything in insert mode
set timeoutlen=1000 ttimeoutlen=0
set linespace=5
set tags=tags;/
set autoread

augroup reload_vimrc
  autocmd!
  autocmd bufwritepost $MYVIMRC nested source $MYVIMRC
augroup END
autocmd! reload_vimrc

" Color Settings
" =====================================================================
if has("gui_running")
  set t_Co=256
else
  let g:CSApprox_loaded = 1
end


set background=dark
set guifont=Fira\ Mono:h14
set laststatus=2
color onedark

" Custom Settings to GUI (macvim or gvim)
" =====================================================================
set guioptions-=r
set guioptions-=L
set guioptions-=T

" iTerm Settings
" =====================================================================
if exists('$ITERM_PROFILE')
  if exists('$TMUX')
    let &t_SI = "\<Esc>[3 q"
    let &t_EI = "\<Esc>[0 q"
  else
    let &t_SI = "\<Esc>]50;CursorShape=1\x7"
    let &t_EI = "\<Esc>]50;CursorShape=0\x7"
  endif
endif

" Custom Mappings
" =====================================================================

" Simple mappings to split windows
nnoremap <silent> vv <C-w>v
nnoremap <silent> ss <C-w>s

" Plugin Settings
" =====================================================================

" Airline
let g:lightline = {
      \ 'colorscheme': 'onedark',
      \ 'active': {
      \   'left': [ [ 'mode', 'paste' ],
      \             [ 'fugitive', 'readonly', 'filename', 'modified' ] ]
      \ },
      \ 'component': {
      \   'readonly': '%{&filetype=="help"?"":&readonly?"⭤":""}',
      \   'modified': '%{&filetype=="help"?"":&modified?"+":&modifiable?"":"-"}',
      \   'fugitive': '%{exists("*fugitive#head")?fugitive#head():""}'
      \ },
      \ 'component_visible_condition': {
      \   'readonly': '(&filetype!="help"&& &readonly)',
      \   'modified': '(&filetype!="help"&&(&modified||!&modifiable))',
      \   'fugitive': '(exists("*fugitive#head") && ""!=fugitive#head())'
      \ }
      \ }

set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

function! MyGit()
  if exists("*fugitive#head")
    let branch = fugitive#head()
    if strlen(branch)
      return ''
    endif
    return ''
  endif
  return ''
endfunction

" NERDTree
let NERDTreeMinimalUI = 1
let NERDTreeDirArrows = 1
let g:NERDTreeWinSize = 30

map <C-\> :NERDTreeToggle<CR>
map <C-n> :NERDTreeFind<CR>

" CtrlP
let g:ctrlp_custom_ignore = '\v[\/](node_modules|bower_components|target|dist|vendor|ashes\/lib)|(\.(swp|ico|git|svn))$'

" Ack
let g:ackprg = 'ag --vimgrep'

set nobackup
set noswapfile

" vim-go
let g:go_highlight_functions = 1
let g:go_highlight_methods = 1
let g:go_highlight_structs = 1
let g:go_highlight_operators = 1
let g:go_highlight_build_constraints = 1

" vim-flow
let g:flow#autoclose = 1

" Syntastic
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0
let g:syntastic_go_checkers = ['golint', 'govet', 'errcheck']

let g:syntastic_mode_map = { "mode": "active",
                           \ "active_filetypes": [],
                           \ "passive_filetypes": ["scala"] }

" Custom mappings
autocmd FileType scala imap <buffer> => ⇒
autocmd FileType scala imap <buffer> <- ←
autocmd FileType scala imap <buffer> <* ← * <~
autocmd FileType scala imap <buffer> -> →
imap jj <Esc>

" Neocomplete
let g:neocomplete#enable_at_startup = 1

" Tagbar
let g:tagbar_type_go = {  
    \ 'ctagstype' : 'go',
    \ 'kinds'     : [
        \ 'p:package',
        \ 'i:imports:1',
        \ 'c:constants',
        \ 'v:variables',
        \ 't:types',
        \ 'n:interfaces',
        \ 'w:fields',
        \ 'e:embedded',
        \ 'm:methods',
        \ 'r:constructor',
        \ 'f:functions'
    \ ],
    \ 'sro' : '.',
    \ 'kind2scope' : {
        \ 't' : 'ctype',
        \ 'n' : 'ntype'
    \ },
    \ 'scope2kind' : {
        \ 'ctype' : 't',
        \ 'ntype' : 'n'
    \ },
    \ 'ctagsbin'  : 'gotags',
    \ 'ctagsargs' : '-sort -silent'
\ }
